IF ELSE

# Define a variable 
x <- 10 
 
# Check if x is greater than 5 
if (x > 5) { 
  print("x is greater than 5") 
} else { 
  print("x is less than or equal to 5") 
} 

# Define a variable 
x <- 10 
 
# Check if x is greater than 5 
if (x > 5) { 
  # If x is greater than 5, check if it's even or odd 
  if (x %% 2 == 0) { 
    print("x is greater than 5 and even") 
  } else { 
    print("x is greater than 5 and odd") 
  } 
} else { 
 print("x is less than or equal to 5") 
}


FOR

for (i in 1:5) { 
  print(i) 
} 
## [1] 1 
## [1] 2 
## [1] 3 
## [1] 4 
## [1] 5 

n <- 5 
total <- 0 
 
# Loop through the sequence of numbers and add them up 
for (i in 1:n) { 
  total <- total + i 
} 
 
# Print the total 
print(total) 
## [1] 15 

# Initialize variables 
start <- 2 
end <- 10 
step <- 2 
total <- 0 
 
# Loop through the sequence of numbers and add them up 
for (i in seq(from=start, to=end, by=step)) { 
  print(i) 
  total <- total + i 
} 
## [1] 2 
## [1] 4 
## [1] 6 
## [1] 8 
## [1] 10 
# Print the total 
print(total) 
## [1] 30

# Define the number to calculate the factorial of 
n <- 5 
 
# Initialize the factorial variable to 1 
factorial <- 1 
 
# Loop through the numbers from 1 to n and multiply the factorial variable 
for (i in 1:n) { 
  factorial <- factorial * i 
} 
 
# Print the factorial of n 
print(factorial) 
## [1] 120

WHILE

# Define the number to calculate the factorial of 
n <- 5 
 
# Initialize the factorial variable to 1 
factorial <- 1 
 
# Initialize the counter variable i to 1 
i <- 1 
 
# Use a while loop to calculate the factorial of n 
while (i <= n) { 
  factorial <- factorial * i 
  i <- i + 1 
}
# Print the factorial of n 
print(factorial) 
## [1] 120

# Initialize the variable i to 1 
i <- 1 
 
# Use a while loop to print the first 10 even numbers 
while (i <= 20) { 
  if (i %% 2 == 0) { 
    print(i) 
  } 
  i <- i + 1 
} 
## [1] 2 
## [1] 4 
## [1] 6 
## [1] 8 
## [1] 10 
## [1] 12 
## [1] 14 
## [1] 16 
## [1] 18 
## [1] 20

FOR AND WHILE LOOPS ARE INTERCHANGABLE IN MOST CASES BUT WHILE LOOP CAN BE MORE APPROPRIATE IN SOME CASES

# Define a vector of numbers 
numbers <- rpois(100,1) 
 
# Initialize the sum and counter variables 
sum <- 0 
i <- 1 
 
# Use a while loop to calculate the sum of the numbers 
while (sum < 50 && i <= length(numbers)) { 
  sum <- sum + numbers[i] 
  i <- i + 1 
} 
 
# Print the sum of the numbers 
print(sum) 
## [1] 50 

REPEAT

repeat { 
  # Generate a random number between 1 and 10 
  x <- sample(1:10, 1) 
 
  # Check if the number is greater than 7 
  if (x > 7) { 
    # If it is, break out of the loop 
    break 
  } 
} 
 
# Print the final value of x 
print(x) 
## [1] 10 
Hereâ€™s an example where a repeat loop might be more appropriate than a for or while loop 
in a statistical context: 
Suppose you are trying to estimate the probability of a rare event that occurs with a very 
low probability, say 0.001. You want to estimate the probability by simulating the event a 
large number of times, say 10,000, and counting how many times the event occurs. 
However, the event is so rare that it might take a long time to simulate 10,000 occurrences 
of the event.

# Set the desired number of occurrences 
num_occurrences <- 10000 
 
# Initialize a counter variable 
occurrence_count <- 0 
 
# Start a repeat loop 
repeat { 
  # Simulate the event 
  if (runif(1) < 0.001) { 
    # If the event occurs, increment the counter variable 
    occurrence_count <- occurrence_count + 1 
  } 
 
  # Check if we have reached the desired number of occurrences 
  if (occurrence_count >= num_occurrences) { 
    # If we have reached the desired number of occurrences, break out of the 
loop 
    break 
  } 
} 
 
# Calculate the estimated probability of the event 
est_prob <- occurrence_count / num_occurrences 
 
# Print the estimated probability 
cat("Estimated probability: ", est_prob, "\n") 
## Estimated probability:  1

APPLY - to all rows/columns
# Apply function to each row of a matrix 
m <- matrix(1:12, nrow = 4) 
m 
##      [,1] [,2] [,3] 
## [1,]    1    5    9 
## [2,]    2    6   10 
## [3,]    3    7   11 
## [4,]    4    8   12 
apply(m, 1, sum)  # Output: 15 18 21 24 
## [1] 15 18 21 24 
USE 2 INSTEAD OF 1 FOR COLUMNS

LAPPLY - each element
# Apply function to each element of a list 
l <- list(a = c(1, 2, 3), b = c(4, 5, 6)) 
lapply(l, mean)   # Output: $a 2 $b 5 
## $a 
## [1] 2 
##  
## $b 
## [1] 5 
# Simplify output using sapply 
l <- list(a = c(1, 2, 3), b = c(4, 5, 6)) 
sapply(l, mean)   # Output: a b 2 5 
## a b  
## 2 5 
SAPPLY - Summarises into vector
